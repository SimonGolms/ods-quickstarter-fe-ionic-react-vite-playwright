# Running nginx as a non-root user: https://hub.docker.com/_/nginx/
pid /tmp/nginx.pid;

# auto detects a good number of processes to run
worker_processes auto;

# Provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
    # Tells the worker to accept multiple connections at a time
    multi_accept on;
}


http {
    client_body_temp_path /tmp/client_temp;
    proxy_temp_path       /tmp/proxy_temp_path;
    fastcgi_temp_path     /tmp/fastcgi_temp;
    uwsgi_temp_path       /tmp/uwsgi_temp;
    scgi_temp_path        /tmp/scgi_temp;

    # what times to include
    include       /etc/nginx/mime.types;
    # what is the default one
    default_type  application/octet-stream;

    # Sets the path, format, and configuration for a buffered log write
    log_format compression '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $upstream_addr '
        '"$http_referer" "$http_user_agent"';

    # List from certain bots/crawlers
    map $http_user_agent $log_ua {
        # OpenShift probe checker
        ~kube-probe 0;

        default 1;
    }

    server {
        # listen on port 8080
        listen  8080   default_server;
        listen  [::]:8080   default_server;

        # save logs here (exclude specific user agents)
        access_log /var/log/nginx/access.log compression if=$log_ua;

        # where the root here
        root /usr/share/nginx/html;
        # what file to server as index
        index index.html index.htm;

        location / {
            expires off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            # First attempt to serve request as file, then
            # as directory, then fall back to redirecting to index.html
            try_files $uri $uri/ /index.html;
        }

        location = /index.html {
            expires off;
            access_log off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # Javascript file for injecting runtime environment variables
        location = /inject.js {
            expires off;
            access_log off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # API Gateway
        location /api {
          # Workaround to let nginx start even if node-api is not reachable (yet)
          # See: https://sandro-keil.de/blog/let-nginx-start-if-upstream-host-is-unavailable-or-down/
          set $nodeapi ${VITE_API_URL};

          proxy_buffer_size     16k; # 16k of buffers from pool used for headers
          proxy_buffers         8 16k; # Buffer pool = 8 buffers of 16k
          proxy_connect_timeout 300; # Timeout in seconds (=5 minutes)
          proxy_pass            $nodeapi;
          proxy_read_timeout    300;
          proxy_send_timeout    300;
          send_timeout          300;
        }


        # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
          expires 1M;
          access_log off;
          add_header Cache-Control "public";
        }

        # Javascript and CSS files
        location ~* \.(?:css|js)$ {
            try_files $uri =404;
            expires 1M;
            access_log off;
            add_header Cache-Control "public";
        }


        # Any route containing a file extension (e.g. /devicesfile.js)
        location ~ ^.+\..+$ {
            try_files $uri =404;
        }
    }
}
